{"version":3,"sources":["components/clickCards/index.js","components/Wrapper/index.js","components/guessNotes/index.js","components/Score/index.js","components/highScore/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ClickCard","props","react_default","a","createElement","className","data-id","id","onClick","handleGuess","alt","name","src","image","Wrapper","children","GuessNote","message","Score","score","highScore","Title","href","guessNotes","guessMessage","style","float","components_Score","App","state","characters","guesses","randomizeCards","newOrder","_this","sort","Math","random","setState","guessId","includes","concat","_this2","this","components_Title","components_Wrapper","map","character","clickCards","Object","assign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4gFAaeA,MAVf,SAAmBC,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,UAASL,EAAMM,GAAIC,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMM,MACvFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,iBCAlCC,MAJf,SAAiBb,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMc,WCI1BC,MANf,SAAmBf,GACf,OACIC,EAAAC,EAAAC,cAAA,QAAMG,GAAG,WAAWN,EAAMgB,UCInBC,MANf,SAAejB,GACX,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,UAAgCJ,EAAMkB,MAAtC,MCIOD,MANf,SAAejB,GACX,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,eAAqCJ,EAAMmB,kBCiBpCC,MAff,SAAepB,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKG,GAAG,SACJL,EAAAC,EAAAC,cAAA,OAAKG,GAAG,aAAYL,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,gBACpBpB,EAAAC,EAAAC,cAACmB,EAAD,CAAWN,QAAShB,EAAMuB,eAC1BtB,EAAAC,EAAAC,cAAA,OAAKG,GAAG,aAAakB,MAAO,CAAEC,MAAO,UACjCxB,EAAAC,EAAAC,cAACuB,EAAD,CAAOR,MAAOlB,EAAMkB,QACpBjB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACgB,EAAD,CAAWA,UAAWnB,EAAMmB,gCC0CpCQ,6MAhDbC,MAAQ,CACNC,WAAYA,EACZX,MAAO,EACPY,QAAS,GACTP,aAAc,GACdJ,UAAW,KAGbY,eAAiB,WACf,IAAIC,EACJA,EAAWC,EAAKL,MAAMC,WAAWK,KAAK,iBAAM,GAAMC,KAAKC,WACvDH,EAAKI,SAAS,CAAER,WAAYG,OAG9BxB,YAAc,SAAC8B,GACTL,EAAKL,MAAME,QAAQS,SAASD,GAC9BL,EAAKI,SAAS,CACZP,QAAS,GACTP,aAAc,SACdL,MAAO,KAGTe,EAAKI,SAAS,CACZP,QAASG,EAAKL,MAAME,QAAQU,OAAOF,GACnCf,aAAc,WACdL,MAAOe,EAAKL,MAAMV,MAAQ,IAExBe,EAAKL,MAAMV,MAAQ,GAAKe,EAAKL,MAAMT,WACrCc,EAAKI,SAAS,CAAElB,UAAWc,EAAKL,MAAMV,MAAQ,KAGlDe,EAAKF,0FAGE,IAAAU,EAAAC,KACP,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACwC,EAAD,CAAOpB,aAAcmB,KAAKd,MAAML,aAAcL,MAAOwB,KAAKd,MAAMV,MAAOC,UAAWuB,KAAKd,MAAMT,YAC7FlB,EAAAC,EAAAC,cAACyC,EAAD,KACE3C,EAAAC,EAAAC,cAAA,OAAKG,GAAG,aACLoC,KAAKd,MAAMC,WAAWgB,IAAI,SAAAC,GAAS,OAAI7C,EAAAC,EAAAC,cAAC4C,EAADC,OAAAC,OAAA,GAAeH,EAAf,CAA0BtC,YAAaiC,EAAKjC,2BAzC9E0C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.372cb00a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickCard(props) {\n    return (\n        <div className=\"card click-card\" data-id={props.id} onClick={() => props.handleGuess(props.id)}>\n            <div className=\"card-body\">\n                <img alt={props.name} src={props.image} />\n            </div>\n        </div>\n    )\n}\n\nexport default ClickCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nfunction GuessNote(props) {\n    return (\n        <span id=\"message\">{props.message}</span>\n    );\n};\n\nexport default GuessNote;","import React from \"react\";\n\nfunction Score(props) {\n    return (\n        <span className=\"score\">Score: {props.score} </span>\n    );\n};\n\nexport default Score;","import React from \"react\";\n\nfunction Score(props) {\n    return (\n        <span className=\"score\">High Score: {props.highScore}</span>\n    );\n};\n\nexport default Score;","import React from \"react\";\nimport GuessNote from \"../guessNotes/index\";\nimport Score from \"../Score/index\";\nimport HighScore from \"../highScore/index\";\nimport \"./style.css\";\n\nfunction Title(props) {\n    return (\n        <div className=\"pink-wrap\">\n            <div id=\"title\">\n                <div id=\"game-name\"><a href=\"/\">Clicky Game</a></div>\n                <GuessNote message={props.guessMessage} />\n                <div id=\"score-area\" style={{ float: \"right\" }}>\n                    <Score score={props.score} />\n                    <p><HighScore highScore={props.highScore} /></p>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Title;","import React, { Component } from 'react';\nimport ClickCard from \"./components/clickCards/index\";\nimport Wrapper from \"./components/Wrapper/index\";\nimport Title from \"./components/Title/index\";\nimport './App.css';\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  state = {\n    characters: characters,\n    score: 0,\n    guesses: [],\n    guessMessage: \"\",\n    highScore: 0\n  }\n\n  randomizeCards = () => {\n    let newOrder = [];\n    newOrder = this.state.characters.sort(() => 0.5 - Math.random());\n    this.setState({ characters: newOrder });\n  };\n\n  handleGuess = (guessId) => {\n    if (this.state.guesses.includes(guessId)) {\n      this.setState({\n        guesses: [],\n        guessMessage: \"Sorry!\",\n        score: 0\n      });\n    } else {\n      this.setState({\n        guesses: this.state.guesses.concat(guessId),\n        guessMessage: \"Correct!\",\n        score: this.state.score + 1\n      });\n      if (this.state.score + 1 >= this.state.highScore) {\n        this.setState({ highScore: this.state.score + 1 });\n      };\n    };\n    this.randomizeCards();\n  };\n\n  render() {\n    return (\n      <div className=\"App row\">\n        <Title guessMessage={this.state.guessMessage} score={this.state.score} highScore={this.state.highScore} />\n        <Wrapper>\n          <div id=\"card-area\">\n            {this.state.characters.map(character => <ClickCard {...character} handleGuess={this.handleGuess} />)}\n          </div>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}